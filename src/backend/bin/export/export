#!/usr/bin/env node

var async = require('async'),
    _ = require('underscore'),
    assert = require('assert'),
    program = require('commander');

var DatabaseManager = require('../../data/'),
    configs = require('../../utils/configs');

program
  .version('0.0.1')
  .option('    --collection [collectionname]', 'Export collection name: class, facility')
  .parse(process.argv);

function exportClassesAndEvents(callback){
    if (program.collection === 'class') {
        var db = new DatabaseManager(configs);

        db.init(["Facility", "Class", "ExportEvent"], function(){
            var classService = db.getInstance("Class"),
                facilityService = db.getInstance("Facility"),
                exportEventService = db.getInstance("ExportEvent");

            exportEventService.modelClass.collection.remove(function(err, count){

                console.log('Removed previous migration data: ' + count);

                //classService.modelClass.find({_id: "52ce54da839173e603001359"}, function(err, classes){
                classService.getAll(function(err, classes){
                    console.log(classes.length);
                    var firstDayOfSecondWeek =  getFirstDayOfSecondWeek();

                    async.eachSeries(classes, function(classItem, callback){

                        console.log(classItem.facilityID);
                        
                        //Find Facility
                        facilityService.getOne({_id : classItem.facilityID}, function(err, facility){
                            

                            var location = facility.address + ' ' + facility.city + ' ' + facility.state;

                            async.eachSeries(classItem.schedule, function(scheduleItem, callback){
                            
                                async.eachSeries(scheduleItem.times, function(timeItem, callback){


                                    var startDate = getDatebyDay(firstDayOfSecondWeek, scheduleItem.dayOfWeek, timeItem.startTime);
                                    var endDate = getDatebyDay(firstDayOfSecondWeek, scheduleItem.dayOfWeek, timeItem.endTime);
                                    var obj = {
                                        eventName : classItem.className,
                                        startDateTime : startDate,
                                        endDateTime : endDate,
                                        recurring: "Weekly",
                                        eventDescription: classItem.className,
                                        location: location
                                    }


                                    if (classItem.instructor && classItem.instructor.trim().length > 0)
                                        obj.eventDescription = obj.eventDescription + " /n" + classItem.instructor;
                                    
                                    exportEventService.create(obj, function(err, result){
                                        callback && callback(err);

                                    })

                                }, function(err){
                                    callback && callback(err);
                                })

                            }, function(err){
                                callback && callback(err);
                            })

                        })
                        

                    }, function(err){
                        if(err) console.log('Error: ' + err);
                        callback && callback();
                    });
                
                
                });
            });
                
        });
    } else{
        callback && callback();
    }
    
};

function getDatebyDay(firstDayOfSecondWeek, stringDay, timeString){
    //"endTime" : "05:30 PM"
    var dayNumber = getDayNumber(stringDay);
    var dat = new Date(firstDayOfSecondWeek.getTime());
    
    dat.setDate(dat.getDate() +  dayNumber);

    var index = timeString.indexOf(":"),
        length = timeString.length,
        hour = parseInt(timeString.substring(0, index)),
        mins = parseInt(timeString.substring(index + 1, index + 3)),
        meridiem = timeString.substring(length - 2, length);
    
    if(meridiem.toLowerCase() == 'pm'){
        if(hour != 12)
            hour += 12;
    }

    dat.setHours(hour);
    dat.setMinutes(mins);
    
    return dat;
}

function getFirstDayOfSecondWeek(){
    var currentDate = new Date();
    var firstDayOfSecondWeek = new Date('01-01-' + currentDate.getFullYear().toString());

    firstDayOfSecondWeek.setDate(firstDayOfSecondWeek.getDate() +  (7 - firstDayOfSecondWeek.getDay()));

    return firstDayOfSecondWeek;
    
}

function getDayNumber(stringDay){
    stringDay = stringDay.toLowerCase();

    switch(stringDay)
    {
        case "sunday":
            return 0;
        case "monday":
            return 1;
        case "tuesday":
            return 2;
        case "wednesday":
            return 3;
        case "thursday":
            return 4;
        case "friday":
            return 5;
        case "saturday":
            return 6;
    } 
}

function exportFacilities(callback){
    console.log(program.collection);
    if (program.collection === 'facility') {
        var db = new DatabaseManager(configs);

        db.init(["Facility", "ExportFacility"], function(){
            var facility = db.getInstance("Facility"),
                exportFacility = db.getInstance("ExportFacility");

            exportFacility.modelClass.collection.remove(function(err, count){

                console.log('Removed previous migration data: ' + count);

                //facility.modelClass.find({_id: "52736a625c4c8caa03000004"}, function(err, facilities){
                facility.modelClass.find({status : 2}, function(err, facilities){
                    console.log('facilities found: ' + facilities.length);

                    async.eachSeries(facilities, function(facility, callback){
                        
                        var obj = {
                            facilityname: facility.facilityName,
                            description:  facility.aboutus,
                            location: facility.address + ' ' + facility.city + ' ' + facility.state,
                            country: facility.country,
                            phone : facility.phoneNumber,
                            email:  facility.email, 
                            website: facility.websiteURL
                        }


                        if(facility.ownersName && facility.ownersName.trim().length > 0){
                            obj.description += ' /n' + facility.ownersName;
                        }
                        
                        exportFacility.create(obj, function(err, result){
                            console.log(result);
                            callback && callback(err);

                        });
                        

                    }, function(err){
                        callback && callback(err);
                    });
                    
                });
            });

        });

    } else{
        callback && callback();
    }
}

async.series([
    exportClassesAndEvents,
    exportFacilities,
   
], function(err, res) {
    assert.ok(!err, "E9984837323. Command fail");

    var exit = function () {
        process.exit(0);
    }

    if (!program.waitingExit)
        exit();
    else
        setTimeout(exit, program.waitingExit);
});