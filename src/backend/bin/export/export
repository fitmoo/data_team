#!/usr/bin/env node

var async = require('async'),
    _ = require('underscore'),
    assert = require('assert'),
    program = require('commander'),
    fs = require('fs'),
    request = require('request');

var DatabaseManager = require('../../data/'),
    configs = require('../../utils/configs'),
    guid = require('../../utils/guid');
    

///////////////////////////////////////////////////////////////////////////////

program
  .version('0.0.1')
  .option('    --collection [collectionname]', 'Export collection name: class, facility')
  .parse(process.argv);

var debug = false;


///////////////////////////////////////////////////////////////////////////////
// Export Facilities to Community
// 1. A facility will be the community in Fitmoo.com
//      a. Facility name, address and all other info should be imported to equivalent
//          fields in fitmoo.com
//          Example: URL will go to the external website link for community
//      b. Owner name can be added to the description as a new line eventually this
//          will the admin account.
//      c. Owner Email should be stored in an owner email field. (This field will be
//          used for claiming a community profile in the claiming functionality)
//      d. Only import Status = 2 //Done
//      e. Or a csv file may be provided.
///////////////////////////////////////////////////////////////////////////////


/**
 * Gets the facilities to export.
 */
function getVerifiedFacilities(facilityService, callback) {
    var opts = { status: 2 };
    if (debug)
        opts = { _id: "52736a625c4c8caa03000004" };

    facilityService.modelClass.find(opts, callback);
}

function getVerifiedFacilities_photo(facilityService, callback) {
    var opts = { status: 2, downloadImage: {$ne : true}  };
    if (debug)
        opts = { _id: "52ce4b32712f15c503000021" }; //52736a625c4c8caa03000004

    facilityService.modelClass.find(opts, callback);
}

function getClassesByFacility(classService, facility, callback) {
    var opts = {
        facilityID: facility._id
    };

    classService.modelClass.find(opts, callback);
}


function getCommunityLocation(facility) {
    return facility.address + ' ' + facility.city + ', ' + facility.state;
}
/**
 * Given the facility object, build the community object
 */
function buildCommunity(facility) {
    var obj = {
        id: facility._id,
        facilityname: facility.facilityName,
        description:  facility.aboutus,
        location: getCommunityLocation(facility),
        country: facility.country,
        phone : facility.phoneNumber,
        email: facility.email, 
        website: facility.websiteURL
    }


    if(facility.ownersName && facility.ownersName.trim().length > 0){
        obj.description += ' /n' + facility.ownersName;
    }

    return obj;
}

/**
 * Migration facilities data to fitmoo.com's community data
 */
function exportFacilities(callback){

    if (program.collection !== 'facility')
        return callback && callback();

    var db = new DatabaseManager(configs);

    db.init(["Facility", "ExportFacility"], function(){
        var facilityService = db.getInstance("Facility"),
            exportFacility = db.getInstance("ExportFacility");

        // Remove all previously migrated records in mongo
        exportFacility.modelClass.collection.remove(function(err, count){

            console.log('Removed previous migration data: ' + count);

            //facilityService.modelClass.find(, function(err, facilities){
            // Find all verified facilitites
            var qryFacility = { status: 2 };
            if (debug)
                qryFacility = {_id: "52736a625c4c8caa03000004"};

            // Gets out all verified facilities to export
            getVerifiedFacilities(facilityService, function(err, facilities){
                console.log('facilities found: ' + facilities.length);

                async.eachSeries(facilities, function(facility, callback){

                    // builds the community object, given the facility object
                    var obj = buildCommunity(facility);

                    // Saves the community object to mongo so that we can
                    // export this to csv later.
                    exportFacility.create(obj, function(err, result){
                        if (debug)
                            console.log(result);
                        callback && callback(err);
                    });

                }, function(err){
                    callback && callback(err);
                });
            });
        });

    });
}




///////////////////////////////////////////////////////////////////////////////
// Export Events
// A class for a particular date and time is an event in Fitmoo.com
///////////////////////////////////////////////////////////////////////////////



function getDatebyDay(firstDayOfSecondWeek, stringDay, timeString){
    //"endTime" : "05:30 PM"
    var dayNumber = getDayNumber(stringDay);
    var dat = new Date(firstDayOfSecondWeek.getTime());

    dat.setDate(dat.getDate() +  dayNumber);

    var index = timeString.indexOf(":"),
        length = timeString.length,
        hour = parseInt(timeString.substring(0, index)),
        mins = parseInt(timeString.substring(index + 1, index + 3)),
        meridiem = timeString.substring(length - 2, length);

    if(meridiem.toLowerCase() == 'pm'){
        if(hour != 12)
            hour += 12;
    }

    dat.setHours(hour);
    dat.setMinutes(mins);

    return dat;
}

function getFirstDayOfSecondWeek(){
    var currentDate = new Date();
    var firstDayOfSecondWeek = new Date('01-01-' + currentDate.getFullYear().toString());

    firstDayOfSecondWeek.setDate(firstDayOfSecondWeek.getDate() +  (7 - firstDayOfSecondWeek.getDay()));

    return firstDayOfSecondWeek;

}

function getDayNumber(stringDay){
    stringDay = stringDay.toLowerCase();

    switch(stringDay)
    {
        case "sunday":
            return 0;
        case "monday":
            return 1;
        case "tuesday":
            return 2;
        case "wednesday":
            return 3;
        case "thursday":
            return 4;
        case "friday":
            return 5;
        case "saturday":
            return 6;
    }
}

function exportClassesAndEvents(callback){
    if (program.collection !== 'class')
        return callback && callback();

    var db = new DatabaseManager(configs);

    db.init(["Facility", "Class", "ExportEvent"], function(){
        var classService = db.getInstance("Class"),
            facilityService = db.getInstance("Facility"),
            exportEventService = db.getInstance("ExportEvent");

        exportEventService.modelClass.collection.remove(function(err, count){

            console.log('Removed previous migration data: ' + count);

            // Gets out all verified facilities to export
            getVerifiedFacilities(facilityService, function(err, facilities){
                console.log('facilities found: ' + facilities.length);

                async.eachSeries(facilities, function(facility, callback){

                    // Gets all classes for the current facility
                    getClassesByFacility(classService, facility, function(err, classes) {
                        if (debug)
                            console.log('found', classes.length, 'classes');

                        var firstDayOfSecondWeek =  getFirstDayOfSecondWeek();
                        async.eachSeries(classes, function(classItem, callback){
                            // console.log('process class', classItem);
                            var location = getCommunityLocation(facility);

                            async.eachSeries(classItem.schedule, function(scheduleItem, callback){

                                async.eachSeries(scheduleItem.times, function(timeItem, callback){

                                    var startDate = getDatebyDay(firstDayOfSecondWeek, scheduleItem.dayOfWeek, timeItem.startTime);
                                    var endDate = getDatebyDay(firstDayOfSecondWeek, scheduleItem.dayOfWeek, timeItem.endTime);

                                    // Description: {Event name} + “ /n” + {if there is instructor} Instructor: {instructor name} {endif}
                                    var desc = classItem.className;
                                    if (classItem.instructor && classItem.instructor.trim().length > 0) {
                                        console.log('class has instructor', classItem);
                                        desc = desc + " /n" + classItem.instructor;
                                    }



                                    var obj = {
                                        // Link Class (Event) to Facility (Community) using FacilityID
                                        facilityId: facility._id,

                                        // ClassName = Event Name
                                        eventName : classItem.className,
                                        startDateTime : startDate,
                                        endDateTime : endDate,
                                        recurring: "weekly",
                                        eventDescription: desc,
                                        location: location
                                    }



                                    exportEventService.create(obj, callback);

                                }, function(err){
                                    callback && callback(err);
                                }); // async.eachSeries(scheduleItem.times

                            }, callback); // async.eachSeries(classItem.schedule

                        }, callback); // async.eachSeries(classes
                    }); // getClasses

                }, callback); // async.eachSeries(facilities

            }); // getVerifiedFacilities
        });

    });
};



///////////////////////////////////////////////////////////////////////////////
// Export Photos
///////////////////////////////////////////////////////////////////////////////


function getPhotosByFacility(photoService, facility, callback) {
    var opts = {
        facilityID : facility._id
        
    };
    
    photoService.photoS3.find(opts, function(err, photos){
        //Add facility.images to the result
        async.eachSeries(facility.images, function(image, callback){

            var newImage = {
                _id: image.id,
                facilityID : facility._id,
                errMessage : "",
                s3UploadStatus : false,
                sourceURL : image.url,
            }
            
            photos.push(newImage);
            callback();
        }, function(err){
            callback && callback(err, photos);
        })


    });
}

function buildAlbumPhoto(photo, fileName) {
    var obj = {
        facilityId : photo.facilityID,
        url: photo.sourceURL,
        fileName: fileName,
        photos3Id: photo._id,
        index : photo.index
    }

    return obj;
}



function exportPhotos(callback){
    if (program.collection !== 'photo')
        return callback && callback();

    var db = new DatabaseManager(configs);

    db.init(['Facility', 'Class', 'ExportPhoto', 'Photo'], function() {
        var facilityService = db.getInstance("Facility"),
            photoS3Service = db.getInstance("Photo"),
            exportPhoto = db.getInstance("ExportPhoto");

        // Gets out all verified facilities to export
        getVerifiedFacilities_photo(facilityService, function(err, facilities){
            console.log('facilities found: ' + facilities.length);

            async.eachSeries(facilities, function(facility, callback) {

                // Get all photos for the current facilities
                getPhotosByFacility(photoS3Service, facility, function(err, photos) {
                    var length = photos.length;

                    exportPhoto.modelClass.remove({facilityId: facility._id}, function(err){
                        console.log('Deleted obsolete image for facilityId: %s', facility.id);
                        var count = 0;
                        console.log('Start download %s image(s) for facilityId: %s', length, facility.id);

                        async.eachSeries(photos, function(photo, callback) {
                            console.log(photo.sourceURL);
                            downloadFile(photo.sourceURL, "photos", function(fileName){
                                
                                //Create exportPhoto
                                if(fileName){
                                    count++;
                                    var obj = buildAlbumPhoto(photo, fileName);
                                    exportPhoto.create(obj, callback);
                                    
                                } else{
                                    callback();
                                }
                            })

                        }, function(err){
                            facility.downloadImage = true;
                            facility.save(function(err, count){
                                console.log('Finish download facilityId: %s', facility.id);
                                callback && callback();
                            })
                        });

                    })

                });

              
            }, callback);
        });
    });
}

function downloadFile(uri, folder, callback){

    // if(debug)
    //    uri = "http://crossfitdubuque.com/files/2013/03/Art-and-Maddy2-1024x529.jpg";

    request.head(uri, function(err, res, body){
        if(err || !res){
            callback && callback();  
        } else{

            //console.log('content-type:', res.headers['content-type']);
            //console.log('content-length:', res.headers['content-length']);

            
            if(res.headers['content-length']){

                var content_type = res.headers['content-type'];

                if(content_type && content_type.length > 0){
                var separateIndex = content_type.indexOf("/");
                if(separateIndex >= 0)
                    content_type = content_type.substring(separateIndex + 1, content_type.length);
                }

                var fileName = guid.generate()  + '.' + content_type;
                var filePath = folder + "/" + fileName;
                
                
                var writeStream = fs.createWriteStream(filePath);

                writeStream.on('finish', function(){
                    console.log('message finish');
                    callback && callback(fileName);
                    
                })

                writeStream.on('error', function(){

                    console.log('writeStream error');
                    return callback && callback();
                })
                
                request({
                    uri : uri,
                    timeout : 120000   
                }, function(err){
                    //on error
                    if(err)
                        console.log('request error: ' + err);
                    
                    return callback && callback();
                })
                .pipe(writeStream)
                .on('close', function(){
                    //callback && callback(fileName);
                })
                    
            } else{
                callback && callback();  
            }
        }
    });
};


///////////////////////////////////////////////////////////////////////////////


async.series([
    exportFacilities,
    exportClassesAndEvents,
    exportPhotos

], function(err, res) {
    assert.ok(!err, "E9984837323. Command fail");

    var exit = function () {
        process.exit(0);
    }

    if (!program.waitingExit)
        exit();
    else
        setTimeout(exit, program.waitingExit);
});